const User = require("../models/UserModel")
const jwt = require("jsonwebtoken")
const bcrypt = require("bcrypt")
const path = require("path")
const { v4: uuidv4 } = require('uuid');
const sharp = require('sharp');
const crypto = require("crypto")
const fs = require("fs")
const axios = require('axios')
const { sendEmail } = require("../transporter");
const { emailHtmlWelcomeUser } = require("../emailHtml/welcomeuserHtml")
require("dotenv").config()

const { checkAuth } = require("../lib/auth")
require("dotenv").config()


// POST: /api/users/login
const authLogin = async (req, res, next) => {
    const lang = res.locals.lang;
    const userID = req.session.userlogin;
    try {
        const { email, password } = req.body;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!email || !password) {
            return res.status(400).render(`./th/pages/authPages/login`, { notdata: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', userID,  active: "profile", translations: req.translations, lang });
        }

        // Normalize email
        const normalizedEmail = email.toLowerCase();
        const user = await User.findOne({ email: normalizedEmail });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!user) {
            return res.status(404).render(`./th/pages/authPages/login`, { notsystem: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', userID,  active: "profile", translations: req.translations, lang });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        const isPasswordValid = await bcrypt.compare(password, user.password);

        if (!isPasswordValid) {
            return res.status(401).render(`./th/pages/authPages/login`, { error: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', userID,  active: "profile", translations: req.translations, lang });
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
        const { _id: id, username, role } = user;
        req.session.userlogin = { user };
        const token = jwt.sign({ id, username, role, email }, process.env.JWT_SECRET, { expiresIn: "5d" });
        const tksave = jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: "5d" });

        // ‡∏™‡πà‡∏á token ‡πÉ‡∏ô HTTP header
        res.cookie('token', token, { httpOnly: true, secure: true });
        res.cookie('tksave', tksave, { httpOnly: false, secure: false });

        // ‡πÄ‡∏Å‡πá‡∏ö token ‡πÉ‡∏ô Session Storage 
        console.log("session daras", req.session.userlogin)
        console.log("token", token)

        const returnTo = req.session.returnTo || `/@${username}`;
        delete req.session.returnTo;
        res.redirect(303, returnTo);
    } catch (error) {
        const errorMessage = error.message || 'Internal Server Error';
        res.status(500).render(`./th/pages/authPages/login`, {
            error: errorMessage,
            userID,
            translations: req.translations, lang,
            active: "profile",
        });
    }
};

// POST: /api/users/register
const authRegister = async (req, res, next) => {
    const lang = res.locals.lang;
    const { username, email, password, password2, 'g-recaptcha-response': recaptchaResponse } = req.body;
    const userID = req.session.userlogin;
    const secretKey = process.env.GOOGLE_SECRET_KEY_CAPTCHA;
    const siteKey = process.env.SITE_KEY;
    try {

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (!username || !email || !password) {
            return res.status(400).render(`./th/pages/authPages/register`, { error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', userID,  active: "register", siteKey, translations: req.translations, lang });
        }

        if (password.length < 6) {
            return res.status(400).render(`./th/pages/authPages/register`, { error: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£', active: "register", userID, siteKey, translations: req.translations, lang });
        }

        if (password != password2) {
            return res.status(400).render(`./th/pages/authPages/register`, { error: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô', active: "register", userID, siteKey, translations: req.translations, lang });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA
        const recaptchaResponseData = await axios.post(`https://www.google.com/recaptcha/api/siteverify`, null, {
            params: {
                secret: secretKey,
                response: recaptchaResponse
            }
        });

        if (!recaptchaResponseData.data.success) {
            return res.status(400).render(`./th/pages/authPages/register`, { error: '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏±‡∏ï‡∏ô‡∏°‡∏±‡∏ï‡∏¥', active: "register", userID, siteKey, translations: req.translations, lang, siteKey });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ)
        // const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@#$!%*?&]{6,}$/;
        // if (!passwordRegex.test(password)) {
        //     return res.status(400).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß' });
        // }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).render(`./th/pages/authPages/register`, { error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß', active: "register", siteKey, userID, translations: req.translations, lang });
        }
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥
        const existingUsername = await User.findOne({ username });
        if (existingUsername) {
            return res.status(400).render(`./th/pages/authPages/register`, { error: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß', active: "register", userID, siteKey, translations: req.translations, lang });
        }

        // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        const hashedPassword = await bcrypt.hash(password, 12);

        const newUser = new User({
            username,
            email,
            password: hashedPassword,
        });

        await newUser.save();
        const token = jwt.sign(
            { id: newUser._id, email: newUser.email },
            process.env.JWT_SECRET,
            { expiresIn: '1h' }
        );

        await sendEmail(
            newUser.email, 
            `‡∏ñ‡∏∂‡∏á ${username} ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏ß !! üòéüòç`, 
            emailHtmlWelcomeUser()
        );

        console.log(token)
        res.cookie('token', token, { httpOnly: true, secure: true });
        res.status(200).render(`./th/pages/authPages/register`, {
            token,
            message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
            userID,
            user: {
                id: newUser._id,
                username: newUser.username,
                email: newUser.email
            },
            siteKey,
            translations: req.translations, lang,
            active: "register",
        });

    } catch (error) {
        const errorMessage = error.response ? error.response.data.message : error.message;
        res.status(500).render(`./th/pages/authPages/register`, {
            error: errorMessage,
            userID,
            translations: req.translations, lang, siteKey,
            active: "register",
        });
    }
}

// ===================================== Google Singin =====================================================
// =========================================================================================================
const GoogleSingin = async (req, res) => {
    const lang = req.params.lang || 'th';
    const userID = req.session.userlogin;
    try {

    } catch (error) {
        const errorMessage = error.message || 'Internal Server Error';
        res.status(500).render('./pages/authPages/login', {
            error: errorMessage,
            userID,
            translations: req.translations, lang
        });
    }
}

const authProfile = async (req, res) => {
    const lang = res.locals.lang;
    const userID = req.session.userlogin;
    try {
        // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô checkAuth ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
        checkAuth(req, res, async () => {
            const user = await User.findById(userID.user._id).select('-password').populate('articles').exec();
            if (!user) {
                return res.status(404).render(`./th/pages/authPages/profile`, { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',  active: "profile", translations: req.translations, lang });
            }
            res.render(`./th/pages/authPages/profile`, {
                active: "profile",
                user,
                userID,
                message: "‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                translations: req.translations, lang
            });
        });
    } catch (error) {
        const errorMessage = error.response ? error.response.data.message : error.message;
        res.status(500).render(`./th/pages/authPages/profile`, {
            error: errorMessage,
            userID,
            translations: req.translations, lang
        });
    }
};


// =============================================== Profile Save Anime =========================================
// ============================================================================================================
const authProfileSaveAnime = async (req, res) => {
    const lang = res.locals.lang;
    const userID = req.session.userlogin;
    try {
        // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô checkAuth ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
        checkAuth(req, res, async () => {
            const user = await User.findById(userID.user._id).select('-password').populate('saveanime').exec();
            if (!user) {
                return res.status(404).render(`./th/pages/authPages/pages/saveAnime`, { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', translations: req.translations, lang });
            }
            res.render(`./th/pages/authPages/pages/saveAnime`, {
                user,
                userID,
                message: "‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                translations: req.translations, lang
            });
        });
    } catch (error) {
        const errorMessage = error.response ? error.response.data.message : error.message;
        res.status(500).render(`./th/pages/authPages/pages/saveAnime`, {
            error: errorMessage,
            userID,
            translations: req.translations, lang
        });
    }
};



const getEditProfile = async (req, res) => {
    const lang = res.locals.lang;
    const userID = req.session.userlogin;
    try {
        res.render(`./th/pages/authPages/Edits/EditProfile`, { userID, translations: req.translations, lang })
    } catch (error) {
        // console.log(error.response ? error.response.data : error.message);
        const errorMessage = error.response ? error.response.data.message : error.message;
        res.status(500).render(`./th/pages/authPages/Edits/EditProfile`, {
            userID,
            message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á API Server ‡πÅ‡∏•‡πâ‡∏ß",
            error: errorMessage,
            translations: req.translations, lang
        })
    }
};


const EditProfile = async (req, res) => {
    const lang = res.locals.lang;
    const userID = req.session.userlogin;
    // console.log('Request Body:', req.body);
    try {
        const { username, email, currentPassword, bio } = req.body;

        if (!currentPassword) {
            return res.status(400).render(`./th/pages/authPages/Edits/EditProfile`, { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', userID, translations: req.translations, lang });
        }

        // Get user from database
        const user = await User.findById(req.user.id);
        if (!user) {
            return res.status(403).render(`./th/pages/authPages/Edits/EditProfile`, { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', userID, translations: req.translations, lang });
        }

        // Validate current password
        // const validateUserPassword = await bcrypt.compare(currentPassword, user.password);
        // if (!validateUserPassword) {
        //     return res.status(422).render(`./th/pages/authPages/Edits/EditProfile`, { error: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', userID, translations: req.translations, lang });
        // }

        // Update user info in database
        const updatedUser = await User.findByIdAndUpdate(
            req.user.id,
            {
                username,
                email,
                bio
            },
            { new: true }
        );

        if (!updatedUser) {
            return res.status(500).render(`./th/pages/authPages/Edits/EditProfile`, { message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ.', userID, translations: req.translations, lang });
        }

        res.status(200).render(`./th/pages/authPages/Edits/EditProfile`, { message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡∏∑‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö.', userID, translations: req.translations, lang });
    } catch (error) {
        console.log(error.response ? error.response.data : error.message);
        const errorMessage = error.response ? error.response.data.message : error.message;
        res.status(500).render(`./th/pages/authPages/Edits/EditProfile`, {
            userID,
            message: errorMessage,
            translations: req.translations, lang
        })
    }
}

const EditProfileAvater = async (req, res) => {
    const lang = res.locals.lang;
    const userID = req.session.userlogin;
    try {
        if (!req.files || !req.files.avatar) {
            return res.status(422).render(`./th/pages/authPages/Edits/EditProfile`, {
                message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
                userID,
                translations: req.translations, lang
            });
        }

        const avatar = req.files.avatar;
        const user = await User.findById(req.user.id);
        if (!user) {
            return res.status(403).render(`./th/pages/authPages/Edits/EditProfile`, { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', userID, translations: req.translations, lang });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
        if (avatar.size > 5000000) {
            return res.status(422).render(`./th/pages/authPages/Edits/EditProfile`, { message: '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB', userID, translations: req.translations, lang });
        }

        // ‡∏•‡∏ö‡∏≠‡∏ß‡∏≤‡∏ï‡∏≤‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (user.profilePicture) {
            const oldAvatarPath = path.join(__dirname, '..', 'public/uploads/profiles', user.profilePicture);
            fs.unlink(oldAvatarPath, (err) => {
                if (err) {
                    console.error("‡∏•‡∏ö‡∏≠‡∏ß‡∏≤‡∏ï‡∏≤‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
                }
            });
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        const fileName = avatar.name;
        const splittedFilename = fileName.split('.');
        const newFilename = splittedFilename[0] + crypto.randomUUID() + '.' + splittedFilename[splittedFilename.length - 1];

        // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        const newFilePath = path.join(__dirname, '..', 'public/uploads/profiles', newFilename);
        avatar.mv(newFilePath, async (err) => {
            if (err) {
                return res.status(500).render(`./th/pages/authPages/Edits/EditProfile`, { error: err, userID, translations: req.translations, lang });
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const updateAvatar = await User.findByIdAndUpdate(req.user.id, { profilePicture: newFilename }, { new: true });

            if (!updateAvatar) {
                return res.status(422).render(`./th/pages/authPages/Edits/EditProfile`, { error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏ß‡∏≤‡∏ï‡∏≤‡∏£‡πå‡πÑ‡∏î‡πâ", userID, translations: req.translations, lang });
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
            req.session.userlogin = { ...req.session.userlogin, user: updateAvatar.toObject() };
            console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï session", req.session.userlogin);

            res.status(200).render(`./th/pages/authPages/Edits/EditProfile`, { message: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', translations: req.translations, lang, dataprofile: updateAvatar.profilePicture, userID });
        });
    } catch (error) {
        const errorMessage = error.response ? error.response.data.message : error.message;
        res.status(500).render(`./th/pages/authPages/Edits/EditProfile`, {
            userID,
            message: errorMessage,
            error: errorMessage,
            translations: req.translations, lang
        });
    }
};

const EditBanner = async (req, res) => {
    const lang = res.locals.lang;
    const userID = req.session.userlogin;
    try {

        res.render(`./th/pages/authPages/Edits/EditBanner`, { userID, translations: req.translations, lang });
    } catch (error) {
        const errorMessage = error.response ? error.response.data.message : error.message;
        res.status(500).render(`./th/pages/authPages/Edits/EditBanner`, {
            userID,
            message: errorMessage,
            error: errorMessage,
            translations: req.translations, lang
        });
    }
}


const EditBannerPost = async (req, res) => {
    const userID = req.session.userlogin;
    const lang = req.params.lang || 'th';
    const image = req.body.image;
    try {
        // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó MIME ‡∏à‡∏≤‡∏Å base64 string
        const mimeType = image.match(/^data:(image\/[a-zA-Z]*);base64,/)[1];
        const extension = mimeType.split('/')[1]; // 'png', 'jpeg', 'jpg', etc.

        const base64Data = image.replace(/^data:image\/[a-zA-Z]*;base64,/, "");

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ UUID ‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        const newFilename = crypto.randomUUID() + '.' + extension;
        const newImagePath = path.join(__dirname, '..', 'public/uploads/banners', newFilename);

        const user = await User.findById(req.user.id);

        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏´‡∏≤‡∏Å‡∏°‡∏µ
        if (user.bannerImagePath) {
            const oldImagePath = path.join(__dirname, '..', 'public/uploads/banners', user.bannerImagePath);
            fs.unlink(oldImagePath, (unlinkErr) => {
                if (unlinkErr) {
                    console.error('Failed to delete old file:', unlinkErr);
                }
            });
        }

        fs.writeFile(newImagePath, base64Data, 'base64', async (err) => {
            if (err) {
                console.error(err);
                return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î' });
            }

            try {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
                const { width, height } = await sharp(newImagePath).metadata();

                // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                const requiredWidth = 2560;
                const requiredHeight = 1440;

                if (width !== requiredWidth || height !== requiredHeight) {
                    fs.unlink(newImagePath, (unlinkErr) => {
                        if (unlinkErr) {
                            return res.status(500).json({ error: `Failed to delete invalid file: ${unlinkErr}` });
                        }
                    });
                    return res.status(400).json({ error: `‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ${requiredWidth}x${requiredHeight}, ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏≠‡∏õ‡∏°‡∏≤ ${width}x${height}.` });
                }

                // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

                if (!user) {
                    fs.unlink(newImagePath, (unlinkErr) => {
                        if (unlinkErr) {
                            return res.status(500).json({ error: `Failed to delete invalid file: ${unlinkErr}` });
                        }
                    });
                    return res.status(404).json({ error: 'User not found' });
                }

                // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                user.bannerImagePath = newFilename;
                await user.save();

                res.status(200).json({ message: '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!' });
            } catch (sharpErr) {
                console.error(sharpErr);
                fs.unlink(newImagePath, (unlinkErr) => {
                    if (unlinkErr) {
                        return res.status(500).json({ error: `Failed to delete invalid file: ${unlinkErr}` });
                    }
                });
                res.status(500).json({ error: 'Error processing image' });
            }
        });
    } catch (error) {
        const errorMessage = error.response ? error.response.data.message : error.message;
        res.status(500).json({ error: errorMessage });
    }
}


const saveTrueMoney = async (req, res) => {
    const userID = req.session.userlogin;
    const { name, truemoneynumber } = req.body;

    try {
        const user = await User.findById(req.user.id);
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        user.bank.truemoneywallet = {
            name,
            truemoneynumber
        };

        await user.save();
        console.log(user)
        // Redirect ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return res.redirect(`/dashboard?id${userID.user._id}`);
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Server error' });
    }
}

const savebankaccount = async (req, res) => {
    const userID = req.session.userlogin;
    const { name, banknumber, bankname } = req.body; // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ

    try {
        const user = await User.findById(req.user.id);
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        user.bank.bankaccount = {
            name,
            number: banknumber, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô banknumber ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            bankname
        };

        await user.save();
        console.log(user)
        // Redirect ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return res.redirect(`/dashboard?id${userID.user._id}`);
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Server error' });
    }
}

const logout = (req, res) => {
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
    req.session.destroy((err) => {
        if (err) {
            return res.status(500).send('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ');
        }

        // ‡∏•‡∏ö Cookie ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        res.clearCookie('token');

        // Redirect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤ Login
        res.redirect('/auth/login');
    });
};

module.exports = {
    getEditProfile,
    authLogin,
    authRegister,
    authProfile,
    authProfileSaveAnime,
    EditProfile,
    EditProfileAvater,
    EditBanner,
    EditBannerPost,
    saveTrueMoney,
    savebankaccount,
    logout
}